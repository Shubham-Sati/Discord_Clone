generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Profile {
    id       String @id @default(uuid())
    userId   String @unique
    name     String
    imageUrl String @db.Text
    email    String @db.Text

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // These below are the relation of Profile table with other tables
    servers  Server[]
    members  Member[]
    channels Channel[]
}

model Server {
    id         String @id @default(uuid())
    name       String
    imageUrl   String @db.Text
    inviteCode String @unique

    profileId String
    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // These below are the relation of Server table with other tables
    members  Member[]
    channels Channel[]

    @@index([profileId])
}

enum MemberRole {
    ADMIN
    MODERATOR
    GUEST
}

model Member {
    id   String     @id @default(uuid())
    role MemberRole @default(GUEST)

    // member having relation with profile table
    profileId String
    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

    // member having relation with server table
    serverId String
    server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([profileId])
    @@index([serverId])
}

enum ChannelType {
    TEXT
    AUDIO
    VIDEO
}

model Channel {
    id   String      @id @default(uuid())
    name String
    type ChannelType @default(TEXT)

    // Channel having relation with Profile table
    profileId String
    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

    // Channel having relation with Server table
    serverId String
    server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([profileId])
    @@index([serverId])
}
